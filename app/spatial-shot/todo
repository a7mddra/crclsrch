this web page has a side panel similar to my settings panel you should implement the content in it for my settings panel but with the same style, animations, colors, everything. your working environment will be at renderer and pages/settings here you will find all you want to implement it well.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spatial Shot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        }

        :root {
            --primary: #000000;
            --primary-light: #333333;
            --secondary: #1a1a1a;
            --danger: #d32f2f;
            --success: #2e7d32;
            --warning: #ed6c02;
            --dark: #0d1117;
            --light: #f6f8fa;
            --gray: #6a737d;
            --border-radius: 12px;
            --shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
            --transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1);
        }

        body {
            background: linear-gradient(to bottom, var(--light), white);
            color: var(--dark);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            line-height: 1.6;
        }

        /* Header with menu button */
        .header {
            display: flex;
            justify-content: flex-end;
            padding: 1.5rem 2rem;
            position: relative;
            z-index: 10;
        }

        .menu-btn {
            background: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: var(--transition);
            position: relative;
            z-index: 100;
        }

        .menu-btn:hover {
            transform: scale(1.1) rotate(90deg);
            background: var(--primary-light);
            color: white;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        }

        .menu-btn.active {
            background: var(--primary);
            color: white;
            transform: rotate(180deg);
        }

        .dots {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .dot {
            width: 4px;
            height: 4px;
            background: currentColor;
            border-radius: 50%;
            transition: var(--transition);
        }

        .menu-btn:hover .dot {
            background: white;
        }

        /* Panel */
        .panel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 380px;
            height: 100vh;
            background: white;
            box-shadow: var(--shadow);
            transition: right 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            z-index: 50;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .panel.active {
            right: 0;
        }

        .panel-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
            z-index: 40;
            backdrop-filter: blur(4px);
        }

        .panel-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .panel-header {
            padding: 1.5rem;
            display: flex;
            justify-content: flex-end;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        }

        .close-btn {
            background: transparent;
            border: none;
            color: var(--dark);
            font-size: 1.5rem;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .close-btn:hover {
            background: rgba(0, 0, 0, 0.05);
            transform: rotate(90deg);
        }

        .panel-content {
            padding: 0;
            overflow-y: auto;
            flex: 1;
        }

        .user-info {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
            background: linear-gradient(to right, var(--primary-light) 0%, white 100%);
        }

        .avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            font-weight: 700;
            transition: var(--transition);
        }

        .avatar:hover {
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }

        .user-details h3 {
            font-size: 1.1rem;
            margin-bottom: 0.3rem;
        }

        .user-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .category {
            padding: 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        }

        .category:last-of-type {
            border-bottom: none;
        }

        .category-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--gray);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 1rem;
            padding: 0 1.5rem;
            padding-top: 1.5rem;
        }

        .button-group {
            display: flex;
            flex-direction: column;
        }

        .btn {
            padding: 1rem 1.5rem;
            border: none;
            background: transparent;
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: space-between;
            text-align: left;
            width: 100%;
            border-radius: 0;
            position: relative;
        }

        .btn:hover {
            background: rgba(0, 0, 0, 0.1);
            padding-left: 2rem;
        }

        .btn-content {
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .btn i {
            font-size: 1.1rem;
            width: 20px;
            color: var(--primary);
            transition: var(--transition);
        }

        .btn:hover i {
            color: var(--primary-light);
            transform: rotate(15deg);
        }

        .btn-text {
            flex: 1;
        }

        .btn-arrow {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .toggle {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--primary);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(20px);
        }

        /* Feedback Messages */
        .feedback-message {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            padding: 12px 24px;
            border-radius: var(--border-radius);
            font-weight: 600;
            z-index: 1000;
            opacity: 0;
            transition: transform 0.4s ease, opacity 0.4s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .feedback-message.show {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }

        .feedback-message.success {
            background-color: var(--success);
            color: white;
        }

        .feedback-message.warning {
            background-color: var(--warning);
            color: white;
        }

        @media (max-width: 480px) {
            .panel {
                width: 100%;
                right: -100%;
            }
        }

        .footer {
            text-align: center;
            padding: 1.5rem;
            color: var(--gray);
            font-size: 0.9rem;
            border-top: 1px solid rgba(0, 0, 0, 0.08);
        }
    </style>
</head>
<body>
    <!-- Header with menu button -->
    <header class="header">
        <button class="menu-btn" id="menuBtn">
            <div class="dots">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        </button>
    </header>

    <!-- Panel overlay -->
    <div class="panel-overlay" id="panelOverlay"></div>

    <!-- Feedback Messages -->
    <div class="feedback-message" id="feedbackMessage"></div>

    <!-- Settings panel -->
    <div class="panel" id="panel">
        <div class="panel-header">
            <button class="close-btn" id="closeBtn">
                <i class="fas fa-arrow-left"></i>
            </button>
        </div>
        
        <div class="panel-content">
            <!-- User Info -->
            <div class="user-info">
                <div class="avatar">JD</div>
                <div class="user-details">
                    <h3>John Doe</h3>
                    <p>Free Plan</p>
                </div>
            </div>
            
            <!-- Settings Category -->
            <div class="category">
                <div class="category-title">Settings</div>
                <div class="button-group">
                    <button class="btn" id="darkModeBtn">
                        <div class="btn-content">
                            <i class="fas fa-moon"></i>
                            <div class="btn-text">Dark Mode</div>
                        </div>
                        <label class="toggle">
                            <input type="checkbox" id="darkModeToggle">
                            <span class="toggle-slider"></span>
                        </label>
                    </button>
                    <button class="btn" id="promptBtn">
                        <div class="btn-content">
                            <i class="fas fa-edit"></i>
                            <div class="btn-text">Customize Prompt</div>
                        </div>
                        <div class="btn-arrow">
                            <i class="fas fa-chevron-right"></i>
                        </div>
                    </button>
                    <button class="btn" id="clearCacheBtn">
                        <div class="btn-content">
                            <i class="fas fa-broom"></i>
                            <div class="btn-text">Clear Cache</div>
                        </div>
                        <div class="btn-arrow"></div>
                    </button>
                </div>
            </div>
            
            <!-- Other Category -->
            <div class="category">
                <div class="button-group">
                    <button class="btn">
                        <div class="btn-content">
                            <i class="fab fa-github"></i>
                            <div class="btn-text">GitHub Repository</div>
                        </div>
                        <div class="btn-arrow"></div>
                    </button>
                    <button class="btn">
                        <div class="btn-content">
                            <i class="fas fa-bug"></i>
                            <div class="btn-text">Report Bug</div>
                        </div>
                        <div class="btn-arrow"></div>
                    </button>
                    <button class="btn" id="premiumBtn">
                        <div class="btn-content">
                            <i class="fas fa-crown"></i>
                            <div class="btn-text">Spatial Shot Premium</div>
                        </div>
                        <div class="btn-arrow">
                            <i class="fas fa-chevron-right"></i>
                        </div>
                    </button>
                </div>
            </div>
            
            <!-- Account Category -->
            <div class="category">
                <div class="category-title">Account</div>
                <div class="button-group">
                    <button class="btn">
                        <div class="btn-content">
                            <i class="fas fa-sign-out-alt"></i>
                            <div class="btn-text">Log Out</div>
                        </div>
                        <div class="btn-arrow"></div>
                    </button>
                    <button class="btn" id="deleteAccountBtn">
                        <div class="btn-content">
                            <i class="fas fa-trash-alt"></i>
                            <div class="btn-text">Delete Account</div>
                        </div>
                        <div class="btn-arrow"></div>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>Spatial Shot &copy; 2023</p>
        </div>
    </div>

    <script>
        // Get DOM elements
        const menuBtn = document.getElementById('menuBtn');
        const closeBtn = document.getElementById('closeBtn');
        const panel = document.getElementById('panel');
        const panelOverlay = document.getElementById('panelOverlay');
        const darkModeBtn = document.getElementById('darkModeBtn');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const clearCacheBtn = document.getElementById('clearCacheBtn');
        const deleteAccountBtn = document.getElementById('deleteAccountBtn');
        const feedbackMessage = document.getElementById('feedbackMessage');
        
        // Toggle panel when menu button is clicked
        menuBtn.addEventListener('click', () => {
            panel.classList.add('active');
            panelOverlay.classList.add('active');
            menuBtn.classList.add('active');
        });
        
        // Close panel when close button is clicked
        closeBtn.addEventListener('click', () => {
            panel.classList.remove('active');
            panelOverlay.classList.remove('active');
            menuBtn.classList.remove('active');
        });
        
        // Close panel when overlay is clicked
        panelOverlay.addEventListener('click', () => {
            panel.classList.remove('active');
            panelOverlay.classList.remove('active');
            menuBtn.classList.remove('active');
        });
        
        // Make entire dark mode button toggle the switch
        darkModeBtn.addEventListener('click', () => {
            darkModeToggle.checked = !darkModeToggle.checked;
            electronAPI.toggleTheme();
        });
        
        // Clear cache with feedback message
        clearCacheBtn.addEventListener('click', () => {
            electronAPI.clearCache();
            showFeedbackMessage('Cache cleared', 'success');
        });
        
        // Delete account with warning feedback message
        deleteAccountBtn.addEventListener('click', () => {
            if(confirm('Are you sure you want to permanently delete your account? This action cannot be undone.')) {
                electronAPI.deleteAccount();
                showFeedbackMessage('Account deletion requested', 'warning');
            }
        });
        
        // Function to show feedback messages
        function showFeedbackMessage(message, type) {
            feedbackMessage.textContent = message;
            feedbackMessage.className = 'feedback-message';
            feedbackMessage.classList.add(type, 'show');
            
            // Hide message after 3 seconds
            setTimeout(() => {
                feedbackMessage.classList.remove('show');
            }, 3000);
        }
        
        // Simulating electronAPI functionality for demonstration
        const electronAPI = {
            toggleTheme: function() {
                document.body.classList.toggle('dark-mode');
                alert('Theme toggled!');
            },
            clearCache: function() {
                // Simulate cache clearing
                console.log('Cache cleared');
            },
            openExternal: function(url) {
                alert(`Opening: ${url}`);
            },
            logout: function() {
                alert('Logging out...');
            },
            deleteAccount: function(email) {
                // Simulate account deletion
                console.log('Account deletion requested');
            },
            getUserData: function() {
                return {
                    name: "John Doe",
                    email: "john.doe@example.com"
                };
            }
        };

        // Attach event listeners to buttons
        document.querySelectorAll('.btn').forEach(button => {
            if(button.textContent.includes('GitHub Repository')) {
                button.addEventListener('click', () => electronAPI.openExternal('https://github.com/a7mddra/spatial-shot'));
            } else if(button.textContent.includes('Log Out')) {
                button.addEventListener('click', electronAPI.logout);
            }
        });
    </script>
</body>
</html>
